{"version":3,"file":"rpc-websocket-client.umd.js","sources":["../src/rpc-websocket-client.ts"],"sourcesContent":["import * as IUuid from 'uuid/interfaces';\nimport * as IWebSocket from 'isomorphic-ws';\n\nconst v1 = require('uuid/v1') as IUuid.v1;\nconst WebSocket = require('isomorphic-ws');\n\nexport type RpcEventFunction = (\n    e: IWebSocket.OpenEvent | IWebSocket.ErrorEvent\n) => void;\nexport type RpcMessageEventFunction = (e: IWebSocket.MessageEvent) => void;\nexport type RpcCloseEventFunction = (e: IWebSocket.CloseEvent) => void;\n\nexport type RpcNotificationEvent = (data: IRpcNotification) => void;\nexport type RpcRequestEvent = (data: IRpcRequest) => void;\nexport type RpcSuccessResponseEvent = (data: IRpcSuccessResponse) => void;\nexport type RpcErrorResponseEvent = (data: IRpcErrorResponse) => void;\n\nexport enum RpcVersions {\n    RPC_VERSION = '2.0'\n}\n\nexport type RpcId = string | number;\n\nexport interface IRpcData {\n    method: string;\n    params?: any;\n}\n\nexport interface IRpcNotification extends IRpcData {\n    jsonrpc: RpcVersions.RPC_VERSION;\n}\n\nexport interface IRpcRequest extends IRpcNotification {\n    // if not included its notification\n    id: RpcId;\n}\n\nexport interface IRpcResponse {\n    id: RpcId;\n    jsonrpc: RpcVersions.RPC_VERSION;\n}\n\nexport interface IRpcSuccessResponse extends IRpcResponse {\n    // if not included its notification\n    result: any;\n}\n\nexport interface IRpcError {\n    code: number;\n    message: string;\n    data?: any;\n}\n\nexport interface IRpcErrorResponse extends IRpcResponse {\n    error: IRpcError;\n}\n\nexport interface IRpcWebSocketConfig {\n    responseTimeout: number;\n}\n\nexport type RpcUnidentifiedMessage =\n    | IRpcRequest\n    | IRpcNotification\n    | IRpcSuccessResponse\n    | IRpcErrorResponse;\n\nexport class RpcWebSocketClient {\n    // native websocket\n    public ws: IWebSocket;\n\n    private idAwaiter: {\n        [id: string]: (data?: any) => void;\n    } = {};\n\n    public onOpenHandlers: RpcEventFunction[] = [];\n    public onAnyMessageHandlers: RpcMessageEventFunction[] = [];\n\n    public onNotification: RpcNotificationEvent[] = [];\n    public onRequest: RpcRequestEvent[] = [];\n    public onSuccessResponse: RpcSuccessResponseEvent[] = [];\n    public onErrorResponse: RpcErrorResponseEvent[] = [];\n\n    public onErrorHandlers: RpcEventFunction[] = [];\n    public onCloseHandlers: RpcCloseEventFunction[] = [];\n\n    public config: IRpcWebSocketConfig = {\n        responseTimeout: 10000\n    };\n\n    // constructor\n    /**\n     * Does not start WebSocket connection!\n     * You need to call connect() method first.\n     * @memberof RpcWebSocketClient\n     */\n    public constructor() {\n        this.ws = undefined as any;\n    }\n\n    // public\n    /**\n     * Starts WebSocket connection. Returns Promise when connection is established.\n     * @param {string} url\n     * @param {(string | string[])} [protocols]\n     * @memberof RpcWebSocketClient\n     */\n    public connect(url: string, protocols?: string | string[]) {\n        this.ws = new WebSocket(url, protocols);\n        return this.listen();\n    }\n\n    // events\n    public onOpen(fn: RpcEventFunction) {\n        this.onOpenHandlers.push(fn);\n    }\n\n    /**\n     * Native onMessage event. DO NOT USE THIS unless you really have to or for debugging purposes.\n     * Proper RPC events are onRequest, onNotification, onSuccessResponse and onErrorResponse (or just awaiting response).\n     * @param {RpcMessageEventFunction} fn\n     * @memberof RpcWebSocketClient\n     */\n    public onAnyMessage(fn: RpcMessageEventFunction) {\n        this.onAnyMessageHandlers.push(fn);\n    }\n\n    public onError(fn: RpcEventFunction) {\n        this.onErrorHandlers.push(fn);\n    }\n\n    public onClose(fn: RpcCloseEventFunction) {\n        this.onCloseHandlers.push(fn);\n    }\n\n    /**\n     * Appends onmessage listener on native websocket with RPC handlers.\n     * If onmessage function was already there, it will call it on beggining.\n     * Useful if you want to use RPC WebSocket Client on already established WebSocket along with function changeSocket().\n     * @memberof RpcWebSocketClient\n     */\n    public listenMessages() {\n        let previousOnMessage: RpcMessageEventFunction | undefined;\n        if (this.ws.onmessage) {\n            previousOnMessage = this.ws.onmessage.bind(this.ws);\n        }\n\n        this.ws.onmessage = (e: IWebSocket.MessageEvent) => {\n            if (previousOnMessage) {\n                previousOnMessage(e);\n            }\n\n            for (const handler of this.onAnyMessageHandlers) {\n                handler(e);\n            }\n\n            const data: RpcUnidentifiedMessage = JSON.parse(e.data.toString());\n            if (this.isNotification(data)) {\n                // notification\n                for (const handler of this.onNotification) {\n                    handler(data);\n                }\n            } else if (this.isRequest(data)) {\n                // request\n                for (const handler of this.onRequest) {\n                    handler(data);\n                }\n                // responses\n            } else if (this.isSuccessResponse(data)) {\n                // success\n                for (const handler of this.onSuccessResponse) {\n                    handler(data);\n                }\n\n                // resolve awaiting function\n                this.idAwaiter[data.id](data.result);\n            } else if (this.isErrorResponse(data)) {\n                // error\n                for (const handler of this.onErrorResponse) {\n                    handler(data);\n                }\n\n                // resolve awaiting function\n                this.idAwaiter[data.id](data.error);\n            }\n        };\n    }\n\n    // communication\n\n    /**\n     * Creates and sends RPC request. Resolves when appropirate response is returned from server or after config.responseTimeout.\n     * @param {string} method\n     * @param {*} [params]\n     * @returns\n     * @memberof RpcWebSocketClient\n     */\n    public call(method: string, params?: any) {\n        return new Promise((resolve, reject) => {\n            const data = this.buildRequest(method, params);\n\n            // give limited time for response\n            let timeout: number | NodeJS.Timeout;\n            if (this.config.responseTimeout) {\n                timeout = setTimeout(() => {\n                    // stop waiting for response\n                    delete this.idAwaiter[data.id];\n                    reject(\n                        `Awaiting response to \"${method}\" with id: ${data.id} timed out.`\n                    );\n                }, this.config.responseTimeout);\n            }\n\n            // expect response\n            this.idAwaiter[data.id] = (responseData?: any) => {\n                // stop timeout\n                clearInterval(timeout as number);\n                // stop waiting for response\n                delete this.idAwaiter[data.id];\n\n                if (this.isRpcError(responseData)) {\n                    reject(responseData);\n                    return;\n                }\n\n                resolve(responseData);\n            };\n\n            const json = JSON.stringify(data);\n            this.ws.send(json);\n        });\n    }\n\n    /**\n     * Creates and sends RPC Notification.\n     * @param {string} method\n     * @param {*} [params]\n     * @memberof RpcWebSocketClient\n     */\n    public notify(method: string, params?: any) {\n        this.ws.send(JSON.stringify(this.buildNotification(method, params)));\n    }\n\n    // setup\n\n    /**\n     * You can provide custom id generation function to replace default uuid/v1.\n     * @param {() => string} idFn\n     * @memberof RpcWebSocketClient\n     */\n    public customId(idFn: () => string) {\n        this.idFn = idFn;\n    }\n\n    /**\n     * Removed jsonrpc from sent messages. Good if you don't care about standards or need better performance.\n     * @memberof RpcWebSocketClient\n     */\n    public noRpc() {\n        this.buildRequest = this.buildRequestBase;\n        this.buildNotification = this.buildNotificationBase;\n        this.buildRpcSuccessResponse = this.buildRpcSuccessResponseBase;\n        this.buildRpcErrorResponse = this.buildRpcErrorResponseBase;\n    }\n\n    /**\n     * Allows modifying configuration.\n     * @param {RpcWebSocketConfig} options\n     * @memberof RpcWebSocketClient\n     */\n    public configure(options: IRpcWebSocketConfig) {\n        Object.assign(this.config, options);\n    }\n\n    /**\n     * Allows you to change used native WebSocket client to another one.\n     * If you have already-connected WebSocket, use this with listenMessages().\n     * @param {WebSocket} ws\n     * @memberof RpcWebSocketClient\n     */\n    public changeSocket(ws: IWebSocket) {\n        this.ws = ws;\n    }\n\n    // private\n\n    // events\n    private listen() {\n        return new Promise((resolve, reject) => {\n            this.ws.onopen = (e: IWebSocket.OpenEvent) => {\n                for (const handler of this.onOpenHandlers) {\n                    handler(e);\n                }\n                resolve(e);\n            };\n\n            // listen for messages\n            this.listenMessages();\n\n            // called before onclose\n            this.ws.onerror = (e: IWebSocket.ErrorEvent) => {\n                for (const handler of this.onErrorHandlers) {\n                    handler(e);\n                }\n            };\n\n            this.ws.onclose = (e: IWebSocket.CloseEvent) => {\n                for (const handler of this.onCloseHandlers) {\n                    handler(e);\n                }\n                reject(e);\n            };\n        });\n    }\n\n    // request\n    private buildRequest(method: string, params?: any): IRpcRequest {\n        const data = this.buildRequestBase(method, params);\n        data.jsonrpc = RpcVersions.RPC_VERSION;\n        return data;\n    }\n\n    private buildRequestBase(method: string, params?: any): IRpcRequest {\n        const data: IRpcRequest = {} as any;\n        data.id = this.idFn();\n        data.method = method;\n\n        if (params) {\n            data.params = params;\n        }\n\n        return data;\n    }\n\n    // notification\n    private buildNotification(method: string, params?: any): IRpcNotification {\n        const data = this.buildNotificationBase(method, params);\n        data.jsonrpc = RpcVersions.RPC_VERSION;\n        return data;\n    }\n\n    private buildNotificationBase(\n        method: string,\n        params?: any\n    ): IRpcNotification {\n        const data: IRpcNotification = {} as any;\n        data.method = method;\n\n        if (params) {\n            data.params = params;\n        }\n\n        return data;\n    }\n\n    // success response\n    private buildRpcSuccessResponse(\n        id: RpcId,\n        result: any\n    ): IRpcSuccessResponse {\n        const data = this.buildRpcSuccessResponseBase(id, result);\n        data.jsonrpc = RpcVersions.RPC_VERSION;\n        return data;\n    }\n\n    private buildRpcSuccessResponseBase(\n        id: RpcId,\n        result: any\n    ): IRpcSuccessResponse {\n        const data: IRpcSuccessResponse = {} as any;\n        data.id = id;\n        data.result = result;\n        return data;\n    }\n\n    // error response\n    private buildRpcErrorResponse(\n        id: RpcId,\n        error: IRpcError\n    ): IRpcErrorResponse {\n        const data = this.buildRpcErrorResponseBase(id, error);\n        data.jsonrpc = RpcVersions.RPC_VERSION;\n        return data;\n    }\n\n    private buildRpcErrorResponseBase(\n        id: RpcId,\n        error: IRpcError\n    ): IRpcErrorResponse {\n        const data: IRpcErrorResponse = {} as any;\n        data.id = id;\n        data.error = error;\n        return data;\n    }\n\n    private idFn(): RpcId {\n        return v1();\n    }\n\n    // tests\n    private isNotification(\n        data: RpcUnidentifiedMessage\n    ): data is IRpcNotification {\n        return !(data as any).id;\n    }\n\n    private isRequest(data: RpcUnidentifiedMessage): data is IRpcRequest {\n        return (data as any).method;\n    }\n\n    private isSuccessResponse(\n        data: RpcUnidentifiedMessage\n    ): data is IRpcSuccessResponse {\n        return data.hasOwnProperty(`result`);\n    }\n\n    private isErrorResponse(\n        data: RpcUnidentifiedMessage\n    ): data is IRpcErrorResponse {\n        return data.hasOwnProperty(`error`);\n    }\n\n    private isRpcError(data: any): data is IRpcError {\n        return typeof data?.code !== 'undefined';\n    }\n}\n"],"names":["RpcVersions"],"mappings":"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"}