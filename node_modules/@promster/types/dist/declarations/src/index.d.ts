import type { DeepRequired } from 'ts-essentials';
import { Gauge, Counter, Summary, Histogram } from 'prom-client';
export declare type TLabelValues = Record<string, string | number>;
declare type TContext<Q, S> = {
    req: Q;
    res: S;
};
export declare type TPromsterOptions = {
    labels?: string[];
    metricPrefix?: string;
    metricTypes?: string[];
    metricNames?: Record<string, string | string[]>;
    normalizePath?: <Q, S>(path: string, context: TContext<Q, S>) => string;
    normalizeStatusCode?: <Q, S>(code: number, context: TContext<Q, S>) => number;
    normalizeMethod?: <Q, S>(method: string, context: TContext<Q, S>) => string;
    getLabelValues?: <Q, S>(request: Q, response: S) => TLabelValues;
    detectKubernetes?: boolean;
    buckets?: number[];
    percentiles?: number[];
    skip?: <Q, S>(request: Q, response: S, labels: TLabelValues) => boolean;
    disableGcMetrics?: boolean;
};
export declare type TDefaultedPromsterOptions = DeepRequired<TPromsterOptions>;
export declare type THttpMetrics = {
    httpRequestDurationPerPercentileInSeconds?: Array<Summary<string>>;
    httpRequestDurationInSeconds?: Array<Histogram<string>>;
    httpRequestsTotal?: Array<Counter<string>>;
    httpRequestContentLengthInBytes?: Array<Histogram<string>>;
    httpResponseContentLengthInBytes?: Array<Histogram<string>>;
};
export declare type TGcMetrics = {
    up: Array<Gauge<string>>;
    countOfGcs: Array<Counter<string>>;
    durationOfGc: Array<Counter<string>>;
    reclaimedInGc: Array<Counter<string>>;
};
export declare type TGraphQlMetrics = {
    graphQlParseDuration?: Array<Histogram<string>>;
    graphQlValidationDuration?: Array<Histogram<string>>;
    graphQlResolveFieldDuration?: Array<Histogram<string>>;
    graphQlRequestDuration?: Array<Histogram<string>>;
    graphQlErrorsTotal?: Array<Counter<string>>;
};
export declare type TValueOf<T> = T[keyof T];
export {};
