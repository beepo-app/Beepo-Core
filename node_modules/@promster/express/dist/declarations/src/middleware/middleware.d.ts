import type { TPromsterOptions } from '@promster/types';
import type { TRequestRecorder } from '@promster/metrics';
import { Application, Request, Response, NextFunction } from 'express';
import { Prometheus } from '@promster/metrics';
interface TApp extends Application {
    locals: Record<string, unknown>;
}
declare type TLocaleTarget = {
    app?: TApp;
    key: string;
    value: typeof Prometheus | TRequestRecorder;
};
declare const exposeOnLocals: ({ app, key, value }: TLocaleTarget) => void;
declare const extractPath: (req: Request) => string;
declare const getRequestRecorder: () => TRequestRecorder;
declare const signalIsUp: () => void;
declare const signalIsNotUp: () => void;
declare type TMiddlewareOptions = {
    app?: TApp;
    options?: TPromsterOptions;
};
declare const createMiddleware: ({ app, options }?: TMiddlewareOptions) => (request: Request, response: Response, next: NextFunction) => void;
export { createMiddleware, exposeOnLocals, extractPath, getRequestRecorder, signalIsUp, signalIsNotUp, };
