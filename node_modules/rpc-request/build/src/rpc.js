"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RPC = void 0;
const request = require("request-promise-native");
class RPC {
  constructor(options = {}) {
    this._rpoptions = options;
  }
  get(options = {}) {
    return this.request({ ...options, method: "GET" });
  }
  post(options = {}) {
    return this.request({ ...options, method: "POST" });
  }
  put(options = {}) {
    return this.request({ ...options, method: "PUT" });
  }
  patch(options = {}) {
    return this.request({ ...options, method: "PATCH" });
  }
  delete(options = {}) {
    return this.request({ ...options, method: "DELETE" });
  }
  head(options = {}) {
    return this.request({ ...options, method: "HEAD" });
  }
  options(options = {}) {
    return this.request({ ...options, method: "OPTIONS" });
  }
  request(options = {}) {
    return this.defaults(
      RPC.prepareOptions(options, this._rpoptions)
    ).promise();
  }
  static cookie(key, value) {
    return request.cookie(key + "=" + value);
  }
  static jar(cookieStore) {
    return request.jar(cookieStore);
  }
  static defaults(options = {}) {
    return request.defaults(options);
  }
  static prepareOptions(options, rpoptions) {
    if (!("url" in options || "uri" in options)) {
      if (!("url" in rpoptions || "uri" in rpoptions)) {
        throw new Error("options.uri is a required argument");
      }
      if ("uri" in rpoptions) {
        return { ...options, uri: rpoptions.uri };
      }
      return { ...options, uri: rpoptions.url };
    }
    return options;
  }
  get defaults() {
    return RPC.defaults(this._rpoptions);
  }
}
exports.RPC = RPC;
