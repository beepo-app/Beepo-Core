/// <reference types="node" />
import { AddressHashMode, ClarityValue } from '@stacks/transactions';
import { StackingErrors } from './constants';
export declare class InvalidAddressError extends Error {
    innerError?: Error;
    constructor(address: string, innerError?: Error);
}
export declare const BitcoinNetworkVersion: {
    readonly mainnet: {
        readonly P2PKH: 0;
        readonly P2SH: 5;
    };
    readonly testnet: {
        readonly P2PKH: 111;
        readonly P2SH: 196;
    };
};
export declare function btcAddressVersionToHashMode(btcAddressVersion: number): AddressHashMode;
export declare function hashModeToBtcAddressVersion(hashMode: AddressHashMode, network: 'mainnet' | 'testnet'): number;
export declare function getAddressHashMode(btcAddress: string): AddressHashMode;
export declare function decodeBtcAddress(btcAddress: string): {
    hashMode: AddressHashMode;
    data: Buffer;
};
export declare function extractPoxAddressFromClarityValue(poxAddrClarityValue: ClarityValue): {
    version: Buffer;
    hashBytes: Buffer;
};
export declare type PoxAddressArgs = [version: Buffer, hashBytes: Buffer, network: 'mainnet' | 'testnet'] | [poxAddrClarityValue: ClarityValue, network: 'mainnet' | 'testnet'];
export declare function poxAddressToBtcAddress(...args: PoxAddressArgs): string;
export declare function getBTCAddress(version: Buffer, checksum: Buffer): string;
export declare function getErrorString(error: StackingErrors): string;
